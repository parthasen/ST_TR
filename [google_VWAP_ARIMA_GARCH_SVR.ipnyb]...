library(quantmod)
library(lattice)
library(timeSeries)
library(rugarch)
library( fArma )
library( fGarch )
require(tseries)
require(rgarch)
require(urca)
require(ggplot2)
#csv file generated from [google_VWAP_ARIMA_GARCH_SVR.ipnyb] python code at Project
#loading data at R
data<-read.table('/home/octo/Desktop/PROJECT/DATA/RPy/data.csv',sep=",",col.names=c("TIME","CLOSE","HIGH","LOW","OPEN","VOLUME"),fill=TRUE)
#deleting first row of dataframe needed for this
data<-data[-1,]
# as.numeric needed to make the columns numeric from pattern
spReturns<-diff(log(as.numeric(data$CLOSE)))
spReturns[as.character(head(index(data$CLOSE)),1)] = 0
# delete the NA from the vector
spReturns<-na.omit(spReturns)

# The maximum draw down
head(drawdownsStats(as.timeSeries(spReturns)),10)

#ARMA model
# Fit the model
spyArma = armaFit( formula=~arma(6,11), data=spReturns )
#spyArma@fit$aic##testing the lowest AIC
as.numeric( predict( spyArma, n.ahead=5, doplot=F )$pred )

#ARIMA model
spyArima<-arima(spReturns, order=c(5,1,5))
acf(spyArima$residuals)
fore <- predict(spyArima, n.ahead=24)
ressq<-(spyArima$residuals)^2
Box.test(ressq, lag = 8, type = "Ljung-Box")
pacf(ressq, main="PACF of Squared Residuals", lag = 30)
# error bounds at 95% confidence level
U <- fore$pred + 2*fore$se
L <- fore$pred - 2*fore$se
ts.plot(as.ts(spReturns), fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)"),col=c(1,2,4), lty=c(1,1,2))

#GARCH MODEL
spyGarch = garchFit(~arma(11,11)+garch(1,1),x = spReturns, cond.dist = "std")
predict(spyGarch, n.ahead=5, doplot=F)

##garchFit(cond.dist = c("dnorm", "dsnorm", "dstd", "dsstd", "dged", "dsged"),skew = 0.9, shape = 4, include.skew = NULL, include.shape = NULL, ...)
##garchFit(formula.mean = ~arma(0,0), formula.var = ~garch(1,1),init.rec = c("mci", "uev"), algorithms = c("sqp", "nlminb", "bfgs"))

#Fitting Bollerslev’s t-GARCH(1,1) Model
garchFit(x =spReturns, cond.dist = "std")

#Fitting Laplace-GARCH(1,1) Model With Different Solvers
garchFit(x = spReturns, cond.dist = "dged", shape = 1, include.shape = FALSE,algorithm = "nlminb+nm")
garchFit(x = spReturns, cond.dist = "dged", shape = 1, include.shape = FALSE,algorithm = "lbfgsb+nm")

garchFit(~arma(5,5), ~garch(3,3), cond.dist = "dstd",x = spReturns)

spyGarch <- ugarchspec(variance.model=list(model="eGARCH", garchOrder=c(3,3), submodel = NULL),
        mean.model=list(armaOrder=c(5,5), include.mean=TRUE, garchInMean = TRUE))
fit <- ugarchfit(data = spReturns, spec =spyGarch)
fit
fittedmodel <- fit@fit
sigma<-fittedmodel$sigma
fitm <- ugarchfit(data = spReturns,out.sample = 10, spec =spyGarch)
pred <- ugarchforecast(fitm, n.ahead = 10,n.roll = 1)
pred.fpm <- fpm(pred)

## ARCH(1,1) model we initialize α= 0.1 and β= 0.8 by typical values of financial time series, and ω by the variance of the series adjusted by the persistence ω= Var(x)∗(1−α−β).

parameter estimation : garch11Fit(x = spReturns)


garch11Fit = function(x)
{
    # Step 1: Initialize Time Series Globally:
    x <<- x
    # Step 2: Initialize Model Parameters and Bounds:
    Mean = mean(x); Var = var(x); S = 1e-6
    params = c(mu = Mean, omega = 0.1*Var, alpha = 0.1, beta = 0.8)
    lowerBounds = c(mu = -10*abs(Mean), omega = S^2, alpha = S, beta = S)
    upperBounds = c(mu = 10*abs(Mean), omega = 100*Var, alpha = 1-S, beta = 1-S)
    # Step 3: Set Conditional Distribution Function:
    garchDist = function(z, hh) { dnorm(x = z/hh)/hh }
    # Step 4: Compose log-Likelihood Function:
    garchLLH = function(parm) {
        mu = parm[1]; omega = parm[2]; alpha = parm[3]; beta = parm[4]
        z = (x-mu); Mean = mean(z^2)
        # Use Filter Representation:
        e = omega + alpha * c(Mean, z[-length(x)]^2)
        h = filter(e, beta, "r", init = Mean)
        hh = sqrt(abs(h))
        llh = -sum(log(garchDist(z, hh)))
        llh }
    print(garchLLH(params))
    # Step 5: Estimate Parameters and Compute Numerically Hessian:
    fit = nlminb(start = params, objective = garchLLH,
                 lower = lowerBounds, upper = upperBounds, control = list(trace=3))
    epsilon = 0.0001 * fit$par
    Hessian = matrix(0, ncol = 4, nrow = 4)
    for (i in 1:4) {
        for (j in 1:4) {
            x1 = x2 = x3 = x4 = fit$par
            x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
            x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
            x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
            x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
            Hessian[i, j] = (garchLLH(x1)-garchLLH(x2)-garchLLH(x3)+garchLLH(x4))/
                (4*epsilon[i]*epsilon[j])
        }
    }
    # Step 6: Create and Print Summary Report:
    se.coef = sqrt(diag(solve(Hessian)))
    tval = fit$par/se.coef
    matcoef = cbind(fit$par, se.coef, tval, 2*(1-pnorm(abs(tval))))
    dimnames(matcoef) = list(names(tval), c(" Estimate",
                                            " Std. Error", " t value", "Pr(>|t|)"))
    cat("\nCoefficient(s):\n")
    printCoefmat(matcoef, digits = 6, signif.stars = TRUE)
}


## garch algo: rolling mean price*mean garch value is predicted value, U=predicted value +2*stdev, L=predicted value -2*stdev
##http://www-stat.wharton.upenn.edu/~steele/Courses/956/RResources/GarchAndR/WurtzEtAlGarch.pdf
##https://theaverageinvestor.wordpress.com/tag/arima/
##http://www.r-bloggers.com/arma-models-for-trading/



windowLength = 100
foreLength = length(spReturns) - windowLength
forecasts <- vector(mode="character", length=foreLength)

for (d in 0:foreLength) {
    # Obtain the S&P500 rolling window for this day
    spReturnsOffset = spReturns[(1+d):(windowLength+d)]

    # Fit the ARIMA model
    final.aic <- Inf
    final.order <- c(0,0,0)
    for (p in 0:5) for (q in 0:5) {
        if ( p == 0 && q == 0) {
            next
        }

        arimaFit = tryCatch( arima(spReturnsOffset, order=c(p, 0, q)),
                             error=function( err ) FALSE,
                             warning=function( err ) FALSE )

        if( !is.logical( arimaFit ) ) {
            current.aic <- AIC(arimaFit)
            if (current.aic < final.aic) {
                final.aic <- current.aic
                final.order <- c(p, 0, q)
                final.arima <- arima(spReturnsOffset, order=final.order)
            }
        } else {
            next
        }
    }

    # Specify and fit the GARCH model
    spec = ugarchspec(
        variance.model=list(garchOrder=c(1,1)),
        mean.model=list(armaOrder=c(final.order[1], final.order[3]), include.mean=T),
        distribution.model="sged"
    )
    fit = tryCatch(
      ugarchfit(
        spec, spReturnsOffset, solver = 'hybrid'
      ), error=function(e) e, warning=function(w) w
    )

    # If the GARCH model does not converge, set the direction to "long" else
    # choose the correct forecast direction based on the returns prediction
    # Output the results to the screen and the forecasts vector
    if(is(fit, "warning")) {
      forecasts[d+1] = paste(index(spReturnsOffset[windowLength]), 1, sep=",")
      print(paste(index(spReturnsOffset[windowLength]), 1, sep=","))
    } else {
      fore = ugarchforecast(fit, n.ahead=1)
      ind = fore@forecast$seriesFor
      forecasts[d+1] = paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=",")
      print(paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=","))
    }
}
