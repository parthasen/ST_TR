#Installing IBPy
source activate PyAlgo#starting env
sudo apt-get install git-core# already installed for GIT
cd /home/octo/IBAPI_py# directory created 
git clone https://github.com/blampe/IbPy# download gitclone 
cd IbPy#(PyAlgo)octo@ALPHA:~/IBAPI_py/IbPy$
python setup.py install

#Another pack https://github.com/Komnomnomnom/swigibpy

python '/home/octo/Desktop/QTPY/qt.py'

# Automatic ordering code

# DEFINE a basic function to capture all server replies
def all_replies_handler(msg):
    print "IB: Server Response = ", msg.typeName, msg

# Main code

# Create the connection to IBGW with client socket id=123
# using a different method than ibConnection
ibgw_conTradeChannel=Connection.create(port=7496,clientId=1234)
ibgw_conTradeChannel.connect()

# Map server replies for "Error" messages to the "error_handler" function
ibgw_conTradeChannel.register(error_handler, 'Error')

# Map all server replies to "all_replies_handler"
# Use typeName to distinguish between the different message types
# This is easier than registering different actions for different messages
ibgw_conTradeChannel.registerAll(all_replies_handler)

# Create a global OrderID for simplicity
# It will be submitted to the IB Server for executing the trade
# To be incremented for the next trade with calls to the IB Server
newOrderID=1

# Create a contract object
# Update the parameters to be sent to the Market Order request
order_ticker = Contract()
order_ticker.m_symbol = 'GTAT'
order_ticker.m_secType = 'STK'
order_ticker.m_exchange = 'SMART'
order_ticker.m_primaryExch = 'SMART'
order_ticker.m_currency = 'USD'
order_ticker.m_localSymbol = 'GTAT'

# Create an order object
# Update the parameters to be sent to the Market Order request
order_desc = Order()
order_desc.m_minQty = 100
order_desc.m_lmtPrice = 11.00
order_desc.m_orderType = 'LMT'
order_desc.m_totalQuantity = 100
order_desc.m_action = 'SELL'

# Send the Market Order request
ibgw_conTradeChannel.placeOrder(newOrderID, order_ticker, order_desc)

print 'disconnected', ibgw_conTradeChannel.disconnect()

#https://www.quantstart.com/articles/Using-Python-IBPy-and-the-Interactive-Brokers-API-to-Automate-Trades
#http://www.elitetrader.com/et/index.php?threads/ib-api-howtos-and-guidelines-for-beginners.279658/page-5
#http://stackoverflow.com/questions/25299539/getting-parameters-of-listed-options-futures-in-interactive-brokers-api/34754857#34754857
#http://stackoverflow.com/questions/34561626/ibpy-getting-portfolio-information-interactive-broker-python/34755680#34755680
#https://www.quantopian.com/posts/ibpython3
#https://code.google.com/archive/p/ibpy/wikis/GettingStarted.wiki
#https://pypi.python.org/pypi/ib/0.8.0


# Globals suck; you should replace with a custom class in your production code.
time_received_next_valid_order_id = None # will be set as soon as we connect
next_valid_order_id = None # will be set as soon as we connect
def next_valid_order_id_handler(msg):
    global time_received_next_valid_order_id, next_valid_order_id
    next_valid_order_id = msg.orderId
    time_received_next_valid_order_id = time.time()

def make_contract(symbol, sec_type, exch, prim_exch, curr):
    Contract.m_symbol = symbol
    Contract.m_secType = sec_type
    Contract.m_exchange = exch
    Contract.m_primaryExch = prim_exch
    Contract.m_currency = curr
    return Contract

def get_next_valid_order_id(conn):
    """
    You must assign a unique order ID to each order you place. IB's servers
    keep track of the next available order ID you can use; this function
    requests that value from IB's servers, waits until IB sends a response,
    then returns the ID.
    """
    global time_received_next_valid_order_id, next_valid_order_id
    last_time = time_received_next_valid_order_id
    next_valid_order_id = conn.reqIds(1) # Always keep arg set to 1 (cruft)
    #Wait until IB sends the next valid ID
    while last_time == time_received_next_valid_order_id:
        time.sleep(0.01)
    return next_valid_order_id

def make_order(action, quantity, price = None):
    if price is not None:
        order = Order()
        order.m_orderType = 'LMT'
        order.m_totalQuantity = quantity
        order.m_action = action
        order.m_lmtPrice = price
    else:
        order = Order()
        order.m_orderType = 'MKT'
        order.m_totalQuantity = quantity
        order.m_action = action
    return order

if __name__ == "__main__":
    conn = Connection.create(port=7496, clientId=1234)

    #Register handlers before connecting
    conn.register(error_handler, 'Error')
    conn.registerAll(reply_handler)
    conn.register(next_valid_order_id_handler, 'NextValidId')

    conn.connect()

    oid = get_next_valid_order_id(conn)
    cont = make_contract('TWTR', 'STK', 'SMART', 'SMART', 'USD')
    offer = make_order('BUY', 1,'MKT')
    conn.placeOrder(oid, cont, offer)

    conn.disconnect()

